<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用Vue.observable()进行状态管理</title>
      <link href="/2020/07/11/vue-observable-de-shi-yong/"/>
      <url>/2020/07/11/vue-observable-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="使用Vue-observable-进行状态管理"><a href="#使用Vue-observable-进行状态管理" class="headerlink" title="使用Vue.observable()进行状态管理"></a>使用Vue.observable()进行状态管理</h2><h3 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h3><p>让一个对象可响应。<code>Vue</code> 内部会用它来处理 <code>data</code> 函数返回的对象。<br>返回的对象可以直接用于<strong>渲染函数</strong>和<strong>计算属性</strong>内，并且会在发生变更时触发相应的更新。也可以作为最小化的跨组件状态存储器，用于简单的场景：</p><h3 id="eg-目录结构"><a href="#eg-目录结构" class="headerlink" title="eg: 目录结构"></a>eg: 目录结构</h3><pre><code>Parent.vueChild.vuestore.js</code></pre><h4 id="store-js"><a href="#store-js" class="headerlink" title="store.js"></a>store.js</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">const</span> store <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">observable</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  addCount <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      store<span class="token punctuation">.</span>count <span class="token operator">++</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  minusCount <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      store<span class="token punctuation">.</span>count <span class="token operator">--</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="Parent-vue"><a href="#Parent-vue" class="headerlink" title="Parent.vue"></a>Parent.vue</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>parent: <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> store.count <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleAdd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>父组件 - 加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleMinus<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>父组件 - 减<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Child</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> store<span class="token punctuation">,</span> mutations <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">'./Child'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span> <span class="token string">'ParentPage'</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Child    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            store<span class="token punctuation">:</span> store        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        handleAdd <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            mutations<span class="token punctuation">.</span><span class="token function">addCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        handleMinus <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            mutations<span class="token punctuation">.</span><span class="token function">minusCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="Child-vue"><a href="#Child-vue" class="headerlink" title="Child.vue"></a>Child.vue</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>child: <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> store.count <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleAdd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>子组件 - 加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleMinus<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>子组件 - 减<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> store<span class="token punctuation">,</span> mutations <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span> <span class="token string">'ChildPage'</span><span class="token punctuation">,</span>    data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            store<span class="token punctuation">:</span> store        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        handleAdd <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            mutations<span class="token punctuation">.</span><span class="token function">addCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        handleMinus <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            mutations<span class="token punctuation">.</span><span class="token function">minusCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2020/07/11/test/"/>
      <url>/2020/07/11/test/</url>
      
        <content type="html"><![CDATA[<h2 id="asdasd-asdasdasd"><a href="#asdasd-asdasdasd" class="headerlink" title="asdasd asdasdasd"></a>asdasd asdasdasd</h2>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue引入图片url变量问题</title>
      <link href="/2020/05/21/vue-yin-ru-tu-pian-url-bian-liang-wen-ti/"/>
      <url>/2020/05/21/vue-yin-ru-tu-pian-url-bian-liang-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="vue引入图片url变量问题"><a href="#vue引入图片url变量问题" class="headerlink" title="vue引入图片url变量问题"></a>vue引入图片url变量问题</h2><ol><li><strong>引入方式</strong></li></ol><p><strong>普通引入</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  // 普通引入  &lt;img src = "../assets/images/01.jpg">    // webpack编译处理后:  &lt;img src = "/img/01.f0afc36d.jpg"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span></code></pre><p><strong>变量引入</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    // 变量引入    &lt;img :src = "imgUrl">    // webpack编译处理后:    &lt;img src = "'../assets/images/01.jpg'" ><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        imgUrl<span class="token punctuation">:</span> <span class="token string">"../assets/images/01.jpg"</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>可见，此时图片将不会显示，路径是错误的，因为使用 :src 调用了 v-bind 指令处理其内容，相对路径不会被webpack的 file-loader 处理。<br>2. <strong>解决方法</strong><br>当路径的文件名需要拼接变量的时候，可使用 require() 引入。  </p><p>方法1: 把imgUrl放在数据中</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    &lt;img :src = "require('../assets/images/'+imgUrl) ">    // 这里的 :src = require()需像这样采用字符串拼接的形式或者直接写一个字符串，不能直接绑定变量如require(imgUrl)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            imgUrl<span class="token punctuation">:</span> <span class="token string">"01.jpg"</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>方法2: 在生命周期函数中设置</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    &lt;img :src = "imgUrl "><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            imgUrl<span class="token punctuation">:</span> <span class="token string">""</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">"assets/images/01.jpg"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>imgUrl <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@/"</span> <span class="token operator">+</span> url<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>方法3: 直接将图片引入为模块</p><pre class=" language-js"><code class="language-js">require imgUrl <span class="token keyword">from</span> <span class="token string">"../assets/images/01.jpg"</span></code></pre><blockquote><p>本文转自：<a href="http://ydongabc.gitee.io/blog/2020/04/24/vue%E5%BC%95%E5%85%A5%E5%9B%BE%E7%89%87url%E5%8F%98%E9%87%8F/">http://ydongabc.gitee.io/blog/2020/04/24/vue%E5%BC%95%E5%85%A5%E5%9B%BE%E7%89%87url%E5%8F%98%E9%87%8F/</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>apply和call的高级用法</title>
      <link href="/2020/05/14/apply-he-call-de-gao-ji-yong-fa/"/>
      <url>/2020/05/14/apply-he-call-de-gao-ji-yong-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="apply和call的高级用法"><a href="#apply和call的高级用法" class="headerlink" title="apply和call的高级用法"></a>apply和call的高级用法</h2><h3 id="1-求数组中的最小值，借用-apply方法"><a href="#1-求数组中的最小值，借用-apply方法" class="headerlink" title="1. 求数组中的最小值，借用 apply方法"></a>1. 求数组中的最小值，借用 apply方法</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// var min = Math.min(11,2,4,5);</span><span class="token comment" spellcheck="true">// console.log(min);   // 2</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>min<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 2 apply将数组展开</span></code></pre><h3 id="2-求数组等具体数据类型，借用-call方法"><a href="#2-求数组等具体数据类型，借用-call方法" class="headerlink" title="2. 求数组等具体数据类型，借用 call方法"></a>2. 求数组等具体数据类型，借用 call方法</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// toString方法数 Object的方法，其他数据类型都对 toString方法进行了重写</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// [object Object]</span><span class="token comment" spellcheck="true">// 数组的 toString方法</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1，2</span><span class="token comment" spellcheck="true">// 直接调用父类 Object的 toString方法，改变 this为 arr数组</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [object Array]</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>理解：这是因为<strong>toString</strong>为<strong>Object</strong>的原型方法，而<strong>Array</strong> ，<strong>function</strong>等类型作为<strong>Object</strong>的实例，<br>都重写了<strong>toString</strong>方法。不同的对象类型调用<strong>toString</strong>方法时，根据原型链的知识，调用<br>的是对应的重写之后的<strong>toString</strong>方法（function类型返回内容为函数体的字符串，<br><code>Array</code>类型返回元素组成的字符串…..），而不会去调用Object上原型<strong>toString</strong>方法<br>（返回对象的具体类型），所以采用<code>obj.toString()</code>不能得到其对象类型，只能将obj转换为字符串类型；<br>因此，在想要得到对象的具体类型时，应该调用Object上原型<code>toString</code>方法。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"toString"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 1,2,3</span><span class="token keyword">delete</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//delete操作符可以删除实例属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"toString"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span><span class="token comment" spellcheck="true">// 删除后直接找到父类Object的toString方法</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// "[object Array]"</span></code></pre><p>删除了<code>Array</code>的<code>toString</code>方法后，同样再采用<code>arr.toString()</code>方法调用时，不<br>再有屏蔽<code>Object</code>原型方法的实例方法，因此沿着原型链，<code>arr</code>最后调用了<code>Object</code><br>的<code>toString</code>方法，返回了和<code>Object.prototype.toString.call(arr)</code>相同的结果</p>]]></content>
      
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于vue-cli3的vue项目移动端样式适配</title>
      <link href="/2020/05/12/ji-yu-vue-cli3-de-vue-xiang-mu-yi-dong-duan-yang-shi-gua-pei/"/>
      <url>/2020/05/12/ji-yu-vue-cli3-de-vue-xiang-mu-yi-dong-duan-yang-shi-gua-pei/</url>
      
        <content type="html"><![CDATA[<h2 id="rem-布局-插件-postcss-pxtorem的配置"><a href="#rem-布局-插件-postcss-pxtorem的配置" class="headerlink" title="rem 布局 - 插件 postcss-pxtorem的配置"></a>rem 布局 - 插件 postcss-pxtorem的配置</h2><ol><li><p>安装插件</p><pre><code>npm i lib-flexible postcss-px2rem</code></pre></li><li><p><strong>在 public 中的 index.html 中删除 meta 标签</strong></p><p>flexible会为页面根据屏幕自动添加<code>&lt;meta name=&#39;viewport&#39; &gt;</code>标签，动态控制<code>initial-scale，maximum-scale，minimum-scale</code>等属性的值。</p></li><li><p>在 src / main.js 中导入插件包</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 导入 rem 的 js, 动态的设置了, 不同屏幕的html根元素的 font-size</span><span class="token keyword">import</span> <span class="token string">'lib-flexible'</span></code></pre></li><li><p>配置 vue.config.js</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  devServer<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    port<span class="token punctuation">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>    open<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// rem 的配置</span>  css<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    loaderOptions<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      css<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>      postcss<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'postcss-px2rem'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 适配 375 屏幕, 设计图 750中量出来的尺寸要 / 2</span>            <span class="token comment" spellcheck="true">// 配置成 37.5 是为了兼容 没有适配 rem 布局的第三方 UI 库</span>            remUnit<span class="token punctuation">:</span> <span class="token number">37.5</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p>样式中直接写<code>px</code>单位，<code>postcss-px2rem</code>插件会将其自动转换为<code>rem</code>单位</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack反向代理的配置说明</title>
      <link href="/2020/05/10/webpack-fan-xiang-dai-li-de-pei-zhi-shuo-ming/"/>
      <url>/2020/05/10/webpack-fan-xiang-dai-li-de-pei-zhi-shuo-ming/</url>
      
        <content type="html"><![CDATA[<h2 id="反向代理的配置说明"><a href="#反向代理的配置说明" class="headerlink" title="反向代理的配置说明"></a>反向代理的配置说明</h2><p><code>webpack</code>的反向代理, 可以起一个临时的代理服务器, 帮助解决在开发过程中的跨域问题, 就算跨域了也能拿到后台的数据</p><p>安装 <code>axios</code>, 发送<code>ajax</code>请求</p><pre><code>npm i axios</code></pre><p>发送请求</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">async</span> created <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token string">`/music/getmv_by_tag?g_tk=5381&amp;loginUin=0&amp;hostUin=0&amp;format=json&amp;inCharset=utf8&amp;outCharset=GB2312&amp;notice=0&amp;platform=yqq.json&amp;needNewCode=0&amp;cmd=shoubo&amp;lan=all`</span></span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>配置代理 (配置<code>vue.config.js</code>文件)</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  devServer<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    port<span class="token punctuation">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>    open<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    proxy<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token string">'/music'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 起一个代理地址的名字</span>        target<span class="token punctuation">:</span> <span class="token string">'https://c.y.qq.com/mv/fcgi-bin/'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 代理的地址</span>        pathRewrite<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">'^/music'</span><span class="token punctuation">:</span> <span class="token string">''</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 路径重写，如果路径有 music，替换为空</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// rem 的配置</span>  <span class="token comment" spellcheck="true">// ....</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue快速原型开发</title>
      <link href="/2020/05/09/vue-kuai-su-yuan-xing-kai-fa/"/>
      <url>/2020/05/09/vue-kuai-su-yuan-xing-kai-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="vue快速原型开发"><a href="#vue快速原型开发" class="headerlink" title="vue快速原型开发"></a>vue快速原型开发</h2><ol><li>全局安装<pre><code>npm i -g @vue/cli-service-global</code></pre></li><li>运行<br>在<code>.vue</code>文件中 <code>cmd</code><pre><code>vue serve 文件名</code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>porimse封装wx.request</title>
      <link href="/2020/05/05/promise-feng-zhuang-wx-request/"/>
      <url>/2020/05/05/promise-feng-zhuang-wx-request/</url>
      
        <content type="html"><![CDATA[<h2 id="porimse封装wx-request"><a href="#porimse封装wx-request" class="headerlink" title="porimse封装wx.request"></a>porimse封装wx.request</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>url<span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">'GET'</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> header<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> headers <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 默认值</span>    <span class="token string">'content-type'</span><span class="token punctuation">:</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">,</span>    <span class="token string">'Cookie'</span><span class="token punctuation">:</span> wx<span class="token punctuation">.</span><span class="token function">getStorageSync</span><span class="token punctuation">(</span><span class="token string">'sessionId'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">''</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 如果有传入新的 header内容</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> header<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      headers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> header<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    wx<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      url<span class="token punctuation">:</span> <span class="token string">'http://route.showapi.com'</span> <span class="token operator">+</span> url<span class="token punctuation">,</span>      data<span class="token punctuation">,</span>      method<span class="token punctuation">,</span>      header<span class="token punctuation">:</span> headers<span class="token punctuation">,</span>      success<span class="token punctuation">:</span> res <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>statusCode <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token function">reject</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>      fail<span class="token punctuation">:</span> err <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  request<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><p>默认的请求方式：<code>GET</code>，<br><code>data</code>数据格式：<code>query string</code></p><p>在微信小程序中使用，通过<code>es6</code>的<code>import .. from ..</code> 引入，然后注册到<code>app</code>全局方法中。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> utils <span class="token keyword">from</span> <span class="token string">'./utils/api'</span><span class="token punctuation">;</span><span class="token operator">...</span>utils<span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 通过三点展开运算符把 utils文件里 api.js的方法注册到app中</span></code></pre><p>调用接口</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 调用接口</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  url<span class="token punctuation">:</span> <span class="token string">'/109-34'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    showapi_appid<span class="token punctuation">:</span> <span class="token string">'62195'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 易源应用 id</span>    showapi_sign<span class="token punctuation">:</span> <span class="token string">'f3b99d296a2c4728a4cfd98690d0b66d'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 为了验证用户身份，以及确保参数不被中间人篡改，需要传递调用者的数字签名。</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>本文转自：<a href="https://blog.zjyegt.cn/2019/05/02/proimse%E5%B0%81%E8%A3%85wx-request/#more">https://blog.zjyegt.cn/2019/05/02/proimse%E5%B0%81%E8%A3%85wx-request/#more</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qs库更好的处理url参数</title>
      <link href="/2020/05/02/qs-ku-geng-hao-de-chu-li-url-can-shu/"/>
      <url>/2020/05/02/qs-ku-geng-hao-de-chu-li-url-can-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="qs-js-更好的处理url参数"><a href="#qs-js-更好的处理url参数" class="headerlink" title="qs.js - 更好的处理url参数"></a>qs.js - 更好的处理url参数</h2><p>第一次接触<code>qs</code>这个库，是在使用<code>axios</code>时，用于给<code>post</code>方法编码，在使用过程中，接触到了一些不同的用法，写在这里分享一下。</p><h3 id="qs-parse"><a href="#qs-parse" class="headerlink" title="qs.parse"></a>qs.parse</h3><ol><li><code>qs.parse</code> 方法可以把一段格式化的字符串转换为对象格式，比如<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">'http://item.taobao.com/item.htm?a=1&amp;b=2&amp;c=&amp;d=xxx&amp;e'</span><span class="token punctuation">;</span><span class="token keyword">let</span> data <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// data的结果是</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  c<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>  d<span class="token punctuation">:</span> xxx<span class="token punctuation">,</span>  e<span class="token punctuation">:</span> <span class="token string">''</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="qs-stringify"><a href="#qs-stringify" class="headerlink" title="qs.stringify"></a>qs.stringify</h3><p>基本用法<br>2. <code>qs.stringify</code> 则和 <code>qs.parse</code> 相反，是把一个参数对象格式化为一个字符串。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> params <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> c<span class="token punctuation">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span> a<span class="token punctuation">:</span> <span class="token string">'d'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 结果是</span><span class="token string">'c=b&amp;a=d'</span></code></pre><ol start="3"><li>排序<br>甚至可以对格式化后的参数进行排序：<pre class=" language-js"><code class="language-js">qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a<span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li></ol><p>// 结果是<br>‘a=b&amp;c=d’</p><pre><code>指定数组编码格式```jslet params = [1, 2, 3];// indices(默认)qs.stringify(&amp;#123;a: params&amp;#125;, &amp;#123;    arrayFormat: &#39;indices&#39;&amp;#125;)// 结果是&#39;a[0]=1&amp;a[1]=2&amp;a[2]=3&#39;// brackets qs.stringify(&amp;#123;a: params&amp;#125;, &amp;#123;    arrayFormat: &#39;brackets&#39;&amp;#125;)// 结果是&#39;a[]=1&amp;a[]=2&amp;a[]=3&#39;// repeatqs.stringify(&amp;#123;a: params&amp;#125;, &amp;#123;    arrayFormat: &#39;repeat&#39;&amp;#125;)// 结果是&#39;a=1&amp;a=2&amp;a=3&#39;</code></pre><p>处理json格式的参数<br>在默认情况下，json格式的参数会用 [] 方式编码，</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> json <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> a<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> b<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> c<span class="token punctuation">:</span> <span class="token string">'d'</span><span class="token punctuation">,</span> e<span class="token punctuation">:</span> <span class="token string">'f'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果 'a[b][c]=d&amp;a[b][e]=f'</span></code></pre><p>但是某些服务端框架，并不能很好的处理这种格式，所以需要转为下面的格式</p><pre class=" language-js"><code class="language-js">qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>allowDots<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果 'a.b.c=d&amp;a.b.e=f'</span></code></pre><blockquote><p>文章转自 <a href="https://www.cnblogs.com/small-coder/p/9115972.html">https://www.cnblogs.com/small-coder/p/9115972.html</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防抖节流函数</title>
      <link href="/2020/04/21/fang-dou-jie-liu-han-shu/"/>
      <url>/2020/04/21/fang-dou-jie-liu-han-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="防抖节流函数"><a href="#防抖节流函数" class="headerlink" title="防抖节流函数"></a>防抖节流函数</h2><h3 id="一、防抖函数（debounce）"><a href="#一、防抖函数（debounce）" class="headerlink" title="一、防抖函数（debounce）"></a>一、防抖函数（debounce）</h3><p><strong>防抖函数</strong>：一个需要频繁触发的函数，在规定的时间内，只让最后一次生效，前面的不生效。<br><strong>常见例子</strong>：<code>搜索框</code>中输入关键字自动发送网络请求。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>delay<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 记录上一次的延时器</span>      <span class="token keyword">var</span> timerId <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 使用闭包保存 timerId</span>      <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 清除上一个延时器</span>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timerId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 重新设置定时器</span>        timerId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 模拟输入框防抖</span>    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.search'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>oninput <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'用户输入了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="二、节流函数（throttle）"><a href="#二、节流函数（throttle）" class="headerlink" title="二、节流函数（throttle）"></a>二、节流函数（throttle）</h3><p><strong>节流函数</strong>：限制一个函数在一定时间内只能执行一次。<br><strong>比如</strong>：有个需要频繁触发的函数，处于优化性能的角度，只让函数触发的第一次生效，后面的不生效。<br><strong>高频事件</strong>：onscroll oninput resize onkeyup onkeydown onkerpress onkeyup(每键入一个字母触发一次)</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>delay<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> lastTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 闭包</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 记录当前函数触发的时间</span>      <span class="token keyword">var</span> nowTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 必须大于传入的 200ms才能再次触发</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>nowTime <span class="token operator">-</span> lastTime <span class="token operator">></span> delay<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 触发函数并修正 this指向</span>        fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 同步时间</span>        lastTime <span class="token operator">=</span> nowTime<span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 设置触发一次后需要再大于 200ms再触发</span>  document<span class="token punctuation">.</span>onscroll <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'触发了滚动事件'</span> <span class="token operator">+</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mpvue中启用sass遇到的坑</title>
      <link href="/2020/04/09/mpvue-qi-yong-sass/"/>
      <url>/2020/04/09/mpvue-qi-yong-sass/</url>
      
        <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -S sass-loader node-sass </code></pre><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>在 vue 组件中添加属性 <code>&lt;style lang=&quot;scss&quot; scope&gt;</code></p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>正当以为可以安心运行 <code>sass</code> 代码时，却报错</p><pre><code>Module build failed: TypeError: this.getResolve is not a function</code></pre><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>原因：<code>sass-loader</code>的版本过高导致的编译错误,要退回到 7.3.1<br>运行：</p><pre><code>　npm uninstall sass-loader（卸载当前版本）　npm install -S sass-loader@7.3.1 （安装指定版本即可）</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> mpvue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue项目开启gzip压缩</title>
      <link href="/2020/03/10/vue-xiang-mu-kai-qi-gzip-ya-suo/"/>
      <url>/2020/03/10/vue-xiang-mu-kai-qi-gzip-ya-suo/</url>
      
        <content type="html"><![CDATA[<p><strong>1. 将<code>npm run build</code>生成的<code>dist</code>目录放到自己搭建的<code>node</code>服务器上</strong><br><strong>2. 开启<code>gzip</code>网络传输压缩，加快传输速度</strong></p><h3 id="服务器端安装compression"><a href="#服务器端安装compression" class="headerlink" title="服务器端安装compression"></a>服务器端安装<code>compression</code></h3><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -D compression</code></pre><h3 id="app-js导入包"><a href="#app-js导入包" class="headerlink" title="app.js导入包"></a><code>app.js</code>导入包</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> compression <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'compression'</span><span class="token punctuation">)</span></code></pre><h3 id="注册为中间件"><a href="#注册为中间件" class="headerlink" title="注册为中间件"></a>注册为中间件</h3><pre class=" language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">compression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p>注意：<br>gzip压缩中间件必须放在静态资源前面</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中的nextick函数</title>
      <link href="/2020/03/05/vue-zhong-de-nextick-han-shu/"/>
      <url>/2020/03/05/vue-zhong-de-nextick-han-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="今天来说说vue实例中的nextTick函数"><a href="#今天来说说vue实例中的nextTick函数" class="headerlink" title="今天来说说vue实例中的nextTick函数"></a>今天来说说vue实例中的nextTick函数</h3><p>简单的来说，Vue更新DOM是要等数据全部变化完成后异步来更新的。所以要获取DOM元素需要写在 <code>this.$nextick()</code> 回调函数里。<br><strong>eg:</strong><br><code>Element-UI</code> 中的 <code>el-tag</code> 动态编辑标签</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input-new-tag<span class="token punctuation">"</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inputVisible<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inputValue<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>saveTagInput<span class="token punctuation">"</span></span>           <span class="token attr-name">@keyup.enter.native</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleInputConfirm<span class="token punctuation">"</span></span> <span class="token attr-name">@blur</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleInputConfirm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">v-else</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button-new-tag<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>showInput<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>+ New Tag<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javaScript"><code class="language-javaScript">showInput() &#123;  this.inputVisible = true;  this.$nextTick( _ => &#123;    // 点击标签切换为文本框并自动获取焦点    this.$refs.saveTagInput.$refs.input.focus();  &#125;);&#125;</code></pre><p>简而言之，如果你在数据改变之后的操作跟改变之后的DOM有关，那么就应该使用 <code>Vue.nextTick()</code> </p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客文章中添加图片</title>
      <link href="/2020/02/26/hexo-bo-ke-wen-zhang-zhong-tian-jia-tu-pian/"/>
      <url>/2020/02/26/hexo-bo-ke-wen-zhang-zhong-tian-jia-tu-pian/</url>
      
        <content type="html"><![CDATA[<p>问题描述：按照要求配置后发现还是显示不出图片，查了很久资料才解决了这个问题</p><h3 id="一、插件安装与配置"><a href="#一、插件安装与配置" class="headerlink" title="一、插件安装与配置"></a>一、插件安装与配置</h3><p>我们需要安装一个图片路径转换的插件 <code>hexo-asset-image</code></p><pre><code>npm i -S hexo-asset-image</code></pre><h3 id="二、打开根目录下-config-yml文件，修改下述内容"><a href="#二、打开根目录下-config-yml文件，修改下述内容" class="headerlink" title="二、打开根目录下 _config.yml文件，修改下述内容"></a>二、打开根目录下 _config.yml文件，修改下述内容</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">post_asset_folder</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><h3 id="三、需要修改插件内容【不然可能会出Bug】"><a href="#三、需要修改插件内容【不然可能会出Bug】" class="headerlink" title="三、需要修改插件内容【不然可能会出Bug】"></a>三、需要修改插件内容【不然可能会出Bug】</h3><p>打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">var</span> cheerio <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cheerio'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><span class="token keyword">function</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> m<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> version <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>hexo<span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'after_post_render'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> config <span class="token operator">=</span> hexo<span class="token punctuation">.</span>config<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>post_asset_folder<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> link <span class="token operator">=</span> data<span class="token punctuation">.</span>permalink<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>version<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Number</span><span class="token punctuation">(</span>version<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>       <span class="token keyword">var</span> beginPos <span class="token operator">=</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>link<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>       <span class="token keyword">var</span> beginPos <span class="token operator">=</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>link<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span>    <span class="token keyword">var</span> endPos <span class="token operator">=</span> link<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    link <span class="token operator">=</span> link<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>beginPos<span class="token punctuation">,</span> endPos<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> toprocess <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'excerpt'</span><span class="token punctuation">,</span> <span class="token string">'more'</span><span class="token punctuation">,</span> <span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> toprocess<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> key <span class="token operator">=</span> toprocess<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> $ <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ignoreWhitespace<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        xmlMode<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        lowerCaseTags<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        decodeEntities<span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// For windows style path, we replace '\' to '/'.</span>            <span class="token keyword">var</span> src <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex">/http[s]*.*|\/\/.*/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>               <span class="token operator">!</span><span class="token regex">/^\s*\//</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// For "about" page, the first part of "src" can't be removed.</span>              <span class="token comment" spellcheck="true">// In addition, to support multi-level local directory.</span>              <span class="token keyword">var</span> linkArray <span class="token operator">=</span> link<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> elem <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">;</span>              <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">var</span> srcArray <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> elem <span class="token operator">!=</span> <span class="token string">''</span> <span class="token operator">&amp;&amp;</span> elem <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>              <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>srcArray<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>                srcArray<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              src <span class="token operator">=</span> srcArray<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>root <span class="token operator">+</span> link <span class="token operator">+</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>              console<span class="token punctuation">.</span>info<span class="token operator">&amp;&amp;</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"update link as:-->"</span><span class="token operator">+</span>config<span class="token punctuation">.</span>root <span class="token operator">+</span> link <span class="token operator">+</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span>info<span class="token operator">&amp;&amp;</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"no src attr, skipped..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span>info<span class="token operator">&amp;&amp;</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      data<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="四、再新建博客文章"><a href="#四、再新建博客文章" class="headerlink" title="四、再新建博客文章"></a>四、再新建博客文章</h3><ul><li>运行 <code>hexo n xxxx</code>， 此时会在 <code>source/ _post</code> 下生成 xxxx文件夹，将图片放进该文件夹内</li><li>在 <code>xxxx.md</code> 中引用直接 <code>![](图片名称)</code>即可</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 相关笔记</title>
      <link href="/2020/01/07/git/"/>
      <url>/2020/01/07/git/</url>
      
        <content type="html"><![CDATA[<h2 id="同步上传仓库"><a href="#同步上传仓库" class="headerlink" title="同步上传仓库"></a>同步上传仓库</h2><p>（mkdir创建文件夹；touch创建具体后缀的文件；vim编辑文件，按esc键退出加:wq保存退出；cat 查看文件内容）<br>设置基本用户信息</p><pre><code>项目关联更改到码云git config --global user.name &quot;zyj.&quot;git config --global user.name &#39;1846011454@qq.com&#39;项目关联更改到GitHubgit config --global user.name &#39;zyj321&#39;git config --global user.name &#39;1846011454@qq.com&#39;git init    //生成.git隐藏文件git status   //查看状态文件git add +文件名  //将文件添加到暂存区git add .    //点表示所有文件git commit -m &#39;add 在暂存区文件名&#39;     //将暂存区的文件提交到仓库git config --list  //可以查看是否已经配置了用户名和邮箱git clone +GitHub下载仓库地址  //下载到本地git push  //同步到GitHubgit mk +文件名称  //删除指定文件</code></pre><h2 id="新学"><a href="#新学" class="headerlink" title="新学"></a>新学</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout  +分支名称     //切换分支<span class="token function">git</span> checkout -b  +分支名称   //创建分支并切换到该分支上<span class="token function">git</span> checkout -d  +分支名称   //删除分支<span class="token function">git</span> branch                       //查看所有分支（*为当前分支）<span class="token function">git</span> branch  +分支名称           //创建分支<span class="token function">git</span> branch -m +新分支名称   //修改当前分支名<span class="token function">git</span> fetch origin     //更新本地项目，以防别人又推送过<span class="token function">git</span> merge +分支名称    //将更新的内容合并到当前分支<span class="token function">git</span> push -u origin +分支名称   //将该分支推送同步到仓库中</code></pre><h2 id="创建到合并分支"><a href="#创建到合并分支" class="headerlink" title="创建到合并分支"></a>创建到合并分支</h2><blockquote><ol><li>git check -b +分支名称      //创建分支并切换到该分支上</li><li>git branch                      //查看所有分支（*为当前分支）</li><li>git checkout  +分支名称   //切换回到主分支</li><li>git merge +分支名称        //将更新的内容合并到当前分支</li></ol></blockquote><h2 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h2><blockquote><ol><li>git add .  //将所有文件添加到暂存区</li><li>git clone +GitHub下载仓库地址  //下载到本地</li><li>git commit -m   “注释”    //将暂存区的文件提交到仓库</li><li>git status   //可以查看是否成功状态</li></ol></blockquote><h2 id="第一次同步仓库遇到的错误"><a href="#第一次同步仓库遇到的错误" class="headerlink" title="第一次同步仓库遇到的错误"></a>第一次同步仓库遇到的错误</h2><p>上传至 GitHub：git remote add origin +新建的空项目的地址链接<br>    报错fatal: <code>remote origin already exists.</code><br>    解决方法：<code>git remote rm origin</code>  (先删除)  ，再次执行添加即可<br><code>git push -u origin master</code></p><h2 id="在GitHub搭建个人博客"><a href="#在GitHub搭建个人博客" class="headerlink" title="在GitHub搭建个人博客"></a>在GitHub搭建个人博客</h2><p>1.创建新的项目<br>名称：用户名.github.io<br>2.创建一个新html，只支持静态网站，将你的代码复制入，(注意：可能该项目只能创建一个html页面,删除readme)<br>3.直接访问<br><a href="https://zyj321.github.io/">https://zyj321.github.io/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + matery主题实现 gitalk 评论功能</title>
      <link href="/2019/09/07/hexo-matery-zhu-ti-shi-xian-ping-lun-gong-neng/"/>
      <url>/2019/09/07/hexo-matery-zhu-ti-shi-xian-ping-lun-gong-neng/</url>
      
        <content type="html"><![CDATA[<h2 id="添加评论-gitalk-功能"><a href="#添加评论-gitalk-功能" class="headerlink" title="添加评论 gitalk 功能"></a>添加评论 gitalk 功能</h2><p>说说今天在添加评论功能遇到一些坑<br><code>gitalk</code><a href="https://github.com/gitalk/gitalk">官方GitHub</a></p><h3 id="步骤一：首先配置一下自己-Github"><a href="#步骤一：首先配置一下自己-Github" class="headerlink" title="步骤一：首先配置一下自己 Github"></a>步骤一：首先配置一下自己 Github</h3><p>打开 <a href="https://github.com/settings/developers">https://github.com/settings/developers</a>  然后选择 OAuth Apps 点击 New OAuth App，如下图所示<br><img src="https://cdn.jsdelivr.net/gh/zyj321/picgo/blog/post/图片3.png" width="50%" title="新建 OAuth Apps "/></p><p><strong>第一个 Application name 是应用名称，随意填写</strong><br><strong>第二个 Homepage URL 是主页地址</strong><br><strong>第三个 是描述，可选填</strong><br><strong>第四个 是回调地址！！这个最重要！！写你博客的地址就可以了</strong></p><h3 id="步骤二：打开主题配置文件-config-yml-找到-gitalk"><a href="#步骤二：打开主题配置文件-config-yml-找到-gitalk" class="headerlink" title="步骤二：打开主题配置文件 _config.yml 找到 gitalk"></a>步骤二：打开主题配置文件 _config.yml 找到 gitalk</h3><p>Gitalk 评论模块的配置，默认为不激活</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">gitalk</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true   </span><span class="token comment" spellcheck="true"># 是否开启评论</span>  <span class="token key atrule">owner</span><span class="token punctuation">:</span> zyj321  <span class="token comment" spellcheck="true"># 填写自己用户名</span>  <span class="token key atrule">repo</span><span class="token punctuation">:</span> zyj321.github.io  <span class="token comment" spellcheck="true"># 注意这个地方是存放评论的地方，写的是你的仓库名不是地址！！！</span>  <span class="token key atrule">oauth</span><span class="token punctuation">:</span>    <span class="token key atrule">clientId</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 你创建完之后会有 一个 id 把 ID 输入到这个地方</span>    <span class="token key atrule">clientSecret</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 你创建完之后会有一个密码输入到这个地方</span>  <span class="token key atrule">admin</span><span class="token punctuation">:</span> zyj321  <span class="token comment" spellcheck="true"># 填写自己用户名</span></code></pre><h3 id="步骤三：重新运行编译"><a href="#步骤三：重新运行编译" class="headerlink" title="步骤三：重新运行编译"></a>步骤三：重新运行编译</h3><pre class=" language-bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo g -d</code></pre><p>登录后即可进行评论<br><img src="https://cdn.jsdelivr.net/gh/zyj321/picgo/blog/post/1.jpg" width="70%" title="评论登录图"/><br><img src="https://cdn.jsdelivr.net/gh/zyj321/picgo/blog/post/2.jpg" width="70%" title="评论成功图"/></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
